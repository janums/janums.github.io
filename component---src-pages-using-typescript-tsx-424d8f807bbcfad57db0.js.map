{"version":3,"file":"component---src-pages-using-typescript-tsx-424d8f807bbcfad57db0.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/using-typescript.tsx","webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst moreLinks = [\n  { text: \"Home\", url: \"/\" },\n  {\n    text: \"Resume\",\n    url: \"/resume/\",\n  },\n  { text: \"Blog\", url: \"/blog/\" },\n  { text: \"Reading\", url: \"/reading/\" },\n];\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      margin: `0 auto`,\n      maxWidth: `var(--size-header)`,\n      padding: `var(--space-4) var(--size-gutter)`,\n      display: `flex`,\n      alignItems: `center`,\n      justifyContent: `space-around`,\n    }}\n  >\n    {moreLinks.map((link, i) => (\n      <React.Fragment key={link.url}>\n        <Link to={link.url}>{link.text}</Link>\n        {i !== moreLinks.length - 1 && <> · </>}\n      </React.Fragment>\n    ))}\n  </header>\n);\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport Header from \"./header\";\nimport \"./layout.css\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: `var(--size-content)`,\n          padding: `var(--size-gutter)`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()} &middot; Built by {\"jps\"}.\n        </footer>\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n"],"names":["Head","React","Seo","title","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","moreLinks","text","url","siteTitle","style","margin","maxWidth","padding","display","alignItems","justifyContent","map","link","i","key","length","_data$site$siteMetada","children","useStaticQuery","Header","siteMetadata","Date","getFullYear","_site$siteMetadata","_site$siteMetadata2","description","metaDescription","defaultTitle","name","content","property","author"],"sourceRoot":""}